{
  "info": {
    "name": "BroBroApp API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Categories",
      "item": [
        {
          "name": "Get All Categories",
          "request": {
            "method": "GET",
            "url": "{{baseUrl}}/categories"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(Array.isArray(response)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Each category has required fields\", function () {",
                  "    const response = pm.response.json();",
                  "    response.forEach(category => {",
                  "        pm.expect(category).to.have.property('id');",
                  "        pm.expect(category).to.have.property('name');",
                  "        pm.expect(category).to.have.property('image');",
                  "        pm.expect(category).to.have.property('pinned');",
                  "        pm.expect(category).to.have.property('last_used');",
                  "        pm.expect(category).to.have.property('created_at');",
                  "    });",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Category",
          "request": {
            "method": "POST",
            "url": "{{baseUrl}}/categories",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Test Category\",\n    \"image\": \"https://example.com/image.jpg\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has required fields\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response.name).to.eql(\"Test Category\");",
                  "    pm.expect(response.image).to.eql(\"https://example.com/image.jpg\");",
                  "    pm.expect(response.pinned).to.be.false;",
                  "});",
                  "",
                  "// Store the category ID for later use",
                  "if (pm.response.code === 201) {",
                  "    pm.environment.set(\"categoryId\", pm.response.json().id);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Category by ID",
          "request": {
            "method": "GET",
            "url": "{{baseUrl}}/categories/{{categoryId}}"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response matches requested category\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.eql(pm.environment.get(\"categoryId\"));",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Category",
          "request": {
            "method": "PUT",
            "url": "{{baseUrl}}/categories/{{categoryId}}",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Updated Category\",\n    \"image\": \"https://example.com/updated.jpg\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Category is updated correctly\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.name).to.eql(\"Updated Category\");",
                  "    pm.expect(response.image).to.eql(\"https://example.com/updated.jpg\");",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Toggle Category Pin",
          "request": {
            "method": "PATCH",
            "url": "{{baseUrl}}/categories/{{categoryId}}/pin"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Pin status is toggled\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('pinned');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Category",
          "request": {
            "method": "DELETE",
            "url": "{{baseUrl}}/categories/{{categoryId}}"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Category is deleted\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include(\"deleted\");",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Notes",
      "item": [
        {
          "name": "Get All Notes",
          "request": {
            "method": "GET",
            "url": "{{baseUrl}}/notes"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(Array.isArray(response)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Each note has required fields\", function () {",
                  "    const response = pm.response.json();",
                  "    response.forEach(note => {",
                  "        pm.expect(note).to.have.property('id');",
                  "        pm.expect(note).to.have.property('content');",
                  "        pm.expect(note).to.have.property('category_id');",
                  "        pm.expect(note).to.have.property('created_at');",
                  "    });",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Note",
          "request": {
            "method": "POST",
            "url": "{{baseUrl}}/notes",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"content\": \"Test Note Content\",\n    \"category_id\": \"{{categoryId}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has required fields\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response.content).to.eql(\"Test Note Content\");",
                  "    pm.expect(response.category_id).to.eql(pm.environment.get(\"categoryId\"));",
                  "});",
                  "",
                  "// Store the note ID for later use",
                  "if (pm.response.code === 201) {",
                  "    pm.environment.set(\"noteId\", pm.response.json().id);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Note by ID",
          "request": {
            "method": "GET",
            "url": "{{baseUrl}}/notes/{{noteId}}"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response matches requested note\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.eql(pm.environment.get(\"noteId\"));",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Note",
          "request": {
            "method": "PUT",
            "url": "{{baseUrl}}/notes/{{noteId}}",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"content\": \"Updated Note Content\",\n    \"category_id\": \"{{categoryId}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Note is updated correctly\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.content).to.eql(\"Updated Note Content\");",
                  "    pm.expect(response.category_id).to.eql(pm.environment.get(\"categoryId\"));",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Note",
          "request": {
            "method": "DELETE",
            "url": "{{baseUrl}}/notes/{{noteId}}"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Note is deleted\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include(\"deleted\");",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Notes by Category",
          "request": {
            "method": "GET",
            "url": "{{baseUrl}}/notes/category/{{categoryId}}"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(Array.isArray(response)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"All notes belong to the specified category\", function () {",
                  "    const response = pm.response.json();",
                  "    response.forEach(note => {",
                  "        pm.expect(note.category_id).to.eql(pm.environment.get(\"categoryId\"));",
                  "    });",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Bulk Notes",
          "request": {
            "method": "POST",
            "url": "{{baseUrl}}/notes/bulk",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"notes\": [\n        {\n            \"content\": \"Bulk Note 1\",\n            \"category_id\": \"{{categoryId}}\"\n        },\n        {\n            \"content\": \"Bulk Note 2\",\n            \"category_id\": \"{{categoryId}}\"\n        }\n    ]\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(Array.isArray(response)).to.be.true;",
                  "    pm.expect(response.length).to.eql(2);",
                  "});",
                  "",
                  "pm.test(\"Each note has required fields\", function () {",
                  "    const response = pm.response.json();",
                  "    response.forEach(note => {",
                  "        pm.expect(note).to.have.property('id');",
                  "        pm.expect(note).to.have.property('content');",
                  "        pm.expect(note).to.have.property('category_id');",
                  "        pm.expect(note.category_id).to.eql(pm.environment.get(\"categoryId\"));",
                  "    });",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000/api"
    }
  ]
}
